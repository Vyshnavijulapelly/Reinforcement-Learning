{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOgOrC0flvBOIjPthdISfHY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vyshnavijulapelly/Reinforcement-Learning/blob/main/RL%20Lab-09\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ygyxcManPQb4",
        "outputId": "0d80a947-f390-4f37-d652-16a935230538"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Timesteps: 2048\tAverage Rollout Reward: 2048.00\n"
          ]
        }
      ],
      "source": [
        "# ppo_pytorch_gymnasium.py\n",
        "import gymnasium as gym\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.distributions import Categorical\n",
        "from collections import deque\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "class ActorCritic(nn.Module):\n",
        "    def __init__(self, obs_dim, act_dim, hidden=64):\n",
        "        super().__init__()\n",
        "        self.shared = nn.Sequential(\n",
        "            nn.Linear(obs_dim, hidden),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(hidden, hidden),\n",
        "            nn.ReLU()\n",
        "        )\n",
        "        self.policy = nn.Linear(hidden, act_dim)\n",
        "        self.value = nn.Linear(hidden, 1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        h = self.shared(x)\n",
        "        logits = self.policy(h)\n",
        "        value = self.value(h).squeeze(-1)\n",
        "        return logits, value\n",
        "\n",
        "\n",
        "def compute_gae(rewards, masks, values, next_value, gamma=0.99, lam=0.95):\n",
        "    values = np.append(values, next_value)\n",
        "    gae = 0\n",
        "    returns = []\n",
        "    for step in reversed(range(len(rewards))):\n",
        "        delta = rewards[step] + gamma * values[step + 1] * masks[step] - values[step]\n",
        "        gae = delta + gamma * lam * masks[step] * gae\n",
        "        returns.insert(0, gae + values[step])\n",
        "    return np.array(returns)\n",
        "\n",
        "\n",
        "def ppo_update(model, optimizer, obs, actions, log_probs_old, returns, advantages,\n",
        "               clip_epsilon=0.2, vf_coef=0.5, ent_coef=0.01, epochs=4, batch_size=64):\n",
        "    dataset_size = obs.shape[0]\n",
        "    for _ in range(epochs):\n",
        "        indices = np.arange(dataset_size)\n",
        "        np.random.shuffle(indices)\n",
        "        for start in range(0, dataset_size, batch_size):\n",
        "            batch_idx = indices[start:start+batch_size]\n",
        "            b_obs = torch.tensor(obs[batch_idx], dtype=torch.float32, device=device)\n",
        "            b_actions = torch.tensor(actions[batch_idx], device=device)\n",
        "            b_old_logp = torch.tensor(log_probs_old[batch_idx], device=device)\n",
        "            b_returns = torch.tensor(returns[batch_idx], dtype=torch.float32, device=device)\n",
        "            b_adv = torch.tensor(advantages[batch_idx], dtype=torch.float32, device=device)\n",
        "\n",
        "            logits, values = model(b_obs)\n",
        "            dist = Categorical(logits=logits)\n",
        "            entropy = dist.entropy().mean()\n",
        "            new_logp = dist.log_prob(b_actions)\n",
        "\n",
        "            ratio = torch.exp(new_logp - b_old_logp)\n",
        "            surr1 = ratio * b_adv\n",
        "            surr2 = torch.clamp(ratio, 1.0 - clip_epsilon, 1.0 + clip_epsilon) * b_adv\n",
        "            policy_loss = -torch.min(surr1, surr2).mean()\n",
        "\n",
        "            value_loss = ((b_returns - values) ** 2).mean()\n",
        "            loss = policy_loss + vf_coef * value_loss - ent_coef * entropy\n",
        "\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            nn.utils.clip_grad_norm_(model.parameters(), 0.5)\n",
        "            optimizer.step()\n",
        "\n",
        "\n",
        "def train(env_name='CartPole-v1', total_timesteps=200, rollout_len=2048, lr=3e-4):\n",
        "    env = gym.make(env_name)\n",
        "    obs_dim = env.observation_space.shape[0]\n",
        "    act_dim = env.action_space.n\n",
        "\n",
        "    model = ActorCritic(obs_dim, act_dim).to(device)\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n",
        "\n",
        "    obs_buf, action_buf, reward_buf, done_buf, value_buf, logp_buf = [], [], [], [], [], []\n",
        "\n",
        "    obs, _ = env.reset(seed=42)\n",
        "    ep_rewards = deque(maxlen=100)\n",
        "    timestep = 0\n",
        "\n",
        "    while timestep < total_timesteps:\n",
        "        for _ in range(rollout_len):\n",
        "            obs_tensor = torch.tensor(obs, dtype=torch.float32, device=device).unsqueeze(0)\n",
        "            logits, value = model(obs_tensor)\n",
        "            dist = Categorical(logits=logits)\n",
        "            action = dist.sample().item()\n",
        "            logp = dist.log_prob(torch.tensor(action, device=device)).item()\n",
        "\n",
        "            next_obs, reward, terminated, truncated, _ = env.step(action)\n",
        "            done = terminated or truncated\n",
        "\n",
        "            obs_buf.append(obs.copy())\n",
        "            action_buf.append(action)\n",
        "            reward_buf.append(reward)\n",
        "            done_buf.append(0.0 if done else 1.0)\n",
        "            value_buf.append(value.item())\n",
        "            logp_buf.append(logp)\n",
        "\n",
        "            obs = next_obs\n",
        "            timestep += 1\n",
        "            if done:\n",
        "                obs, _ = env.reset()\n",
        "\n",
        "        obs_tensor = torch.tensor(obs, dtype=torch.float32, device=device).unsqueeze(0)\n",
        "        _, next_value = model(obs_tensor)\n",
        "        next_value = next_value.item()\n",
        "\n",
        "        returns = compute_gae(reward_buf, done_buf, value_buf, next_value)\n",
        "        advantages = returns - np.array(value_buf)\n",
        "        advantages = (advantages - advantages.mean()) / (advantages.std() + 1e-8)\n",
        "\n",
        "        ppo_update(model, optimizer,\n",
        "                   np.array(obs_buf), np.array(action_buf), np.array(logp_buf),\n",
        "                   returns, advantages)\n",
        "\n",
        "        total_reward = sum(reward_buf[-rollout_len:])\n",
        "        ep_rewards.append(total_reward)\n",
        "\n",
        "        print(f\"Timesteps: {timestep}\\tAverage Rollout Reward: {np.mean(ep_rewards):.2f}\")\n",
        "\n",
        "        obs_buf, action_buf, reward_buf, done_buf, value_buf, logp_buf = [], [], [], [], [], []\n",
        "\n",
        "    env.close()\n",
        "    return model\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    train()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ppo_tensorflow_gymnasium.py\n",
        "import gymnasium as gym\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, Model, optimizers\n",
        "\n",
        "class ActorCritic(Model):\n",
        "    def __init__(self, obs_dim, act_dim, hidden=64):\n",
        "        super().__init__()\n",
        "        self.shared1 = layers.Dense(hidden, activation='relu')\n",
        "        self.shared2 = layers.Dense(hidden, activation='relu')\n",
        "        self.logits = layers.Dense(act_dim)\n",
        "        self.value = layers.Dense(1)\n",
        "\n",
        "    def call(self, inputs):\n",
        "        x = tf.convert_to_tensor(inputs, dtype=tf.float32)\n",
        "        x = self.shared1(x)\n",
        "        x = self.shared2(x)\n",
        "        return self.logits(x), tf.squeeze(self.value(x), axis=-1)\n",
        "\n",
        "\n",
        "def compute_gae_tf(rewards, masks, values, next_value, gamma=0.99, lam=0.95):\n",
        "    values = np.append(values, next_value)\n",
        "    gae = 0\n",
        "    returns = []\n",
        "    for step in reversed(range(len(rewards))):\n",
        "        delta = rewards[step] + gamma * values[step + 1] * masks[step] - values[step]\n",
        "        gae = delta + gamma * lam * masks[step] * gae\n",
        "        returns.insert(0, gae + values[step])\n",
        "    return np.array(returns)\n",
        "\n",
        "\n",
        "@tf.function\n",
        "def ppo_loss(model, obs, actions, old_logp, returns, adv, clip_epsilon=0.2, vf_coef=0.5, ent_coef=0.01):\n",
        "    logits, values = model(obs)\n",
        "    dist = tf.nn.softmax(logits)\n",
        "\n",
        "    # new log probabilities\n",
        "    action_masks = tf.one_hot(actions, logits.shape[-1])\n",
        "    new_probs = tf.reduce_sum(dist * action_masks, axis=1) + 1e-8\n",
        "    new_logp = tf.math.log(new_probs)\n",
        "\n",
        "    ratio = tf.exp(new_logp - old_logp)\n",
        "    s1 = ratio * adv\n",
        "    s2 = tf.clip_by_value(ratio, 1.0 - clip_epsilon, 1.0 + clip_epsilon) * adv\n",
        "    policy_loss = -tf.reduce_mean(tf.minimum(s1, s2))\n",
        "    value_loss = tf.reduce_mean(tf.square(returns - values))\n",
        "    entropy = -tf.reduce_mean(tf.reduce_sum(dist * tf.math.log(dist + 1e-8), axis=1))\n",
        "\n",
        "    total_loss = policy_loss + vf_coef * value_loss - ent_coef * entropy\n",
        "    return total_loss, policy_loss, value_loss, entropy\n",
        "\n",
        "\n",
        "def ppo_update_tf(model, optimizer, obs, actions, old_logp, returns, adv, epochs=4, batch_size=64):\n",
        "    n = obs.shape[0]\n",
        "    idx = np.arange(n)\n",
        "    for _ in range(epochs):\n",
        "        np.random.shuffle(idx)\n",
        "        for start in range(0, n, batch_size):\n",
        "            batch = idx[start:start + batch_size]\n",
        "            with tf.GradientTape() as tape:\n",
        "                loss, pl, vl, ent = ppo_loss(\n",
        "                    model,\n",
        "                    tf.convert_to_tensor(obs[batch], dtype=tf.float32),\n",
        "                    tf.convert_to_tensor(actions[batch], dtype=tf.int32),\n",
        "                    tf.convert_to_tensor(old_logp[batch], dtype=tf.float32),\n",
        "                    tf.convert_to_tensor(returns[batch], dtype=tf.float32),\n",
        "                    tf.convert_to_tensor(adv[batch], dtype=tf.float32),\n",
        "                )\n",
        "            grads = tape.gradient(loss, model.trainable_variables)\n",
        "            grads, _ = tf.clip_by_global_norm(grads, 0.5)\n",
        "            optimizer.apply_gradients(zip(grads, model.trainable_variables))\n",
        "\n",
        "\n",
        "def train(env_name='CartPole-v1', total_timesteps=200, rollout_len=2048, lr=3e-4):\n",
        "    env = gym.make(env_name)\n",
        "    obs_dim = env.observation_space.shape[0]\n",
        "    act_dim = env.action_space.n\n",
        "\n",
        "    model = ActorCritic(obs_dim, act_dim)\n",
        "    dummy = tf.zeros((1, obs_dim))\n",
        "    model(dummy)  # build network\n",
        "    optimizer = optimizers.Adam(learning_rate=lr)\n",
        "\n",
        "    obs_buf, action_buf, reward_buf, done_buf, value_buf, logp_buf = [], [], [], [], [], []\n",
        "\n",
        "    obs, _ = env.reset(seed=42)\n",
        "    timestep = 0\n",
        "    ep_rewards = []\n",
        "\n",
        "    while timestep < total_timesteps:\n",
        "        for _ in range(rollout_len):\n",
        "            logits, value = model(np.expand_dims(obs, axis=0))\n",
        "            logits = logits.numpy()[0]\n",
        "            value = value.numpy()[0]\n",
        "            probs = tf.nn.softmax(logits).numpy()\n",
        "            action = np.random.choice(len(probs), p=probs)\n",
        "            logp = np.log(probs[action] + 1e-8)\n",
        "\n",
        "            next_obs, reward, terminated, truncated, _ = env.step(action)\n",
        "            done = terminated or truncated\n",
        "\n",
        "            obs_buf.append(obs.copy())\n",
        "            action_buf.append(action)\n",
        "            reward_buf.append(reward)\n",
        "            done_buf.append(0.0 if done else 1.0)\n",
        "            value_buf.append(value)\n",
        "            logp_buf.append(logp)\n",
        "\n",
        "            obs = next_obs\n",
        "            timestep += 1\n",
        "            if done:\n",
        "                obs, _ = env.reset()\n",
        "\n",
        "        # compute last value for GAE\n",
        "        _, next_value = model(np.expand_dims(obs, axis=0))\n",
        "        next_value = next_value.numpy()[0]\n",
        "\n",
        "        returns = compute_gae_tf(reward_buf, done_buf, value_buf, next_value)\n",
        "        advantages = returns - np.array(value_buf)\n",
        "        advantages = (advantages - advantages.mean()) / (advantages.std() + 1e-8)\n",
        "\n",
        "        ppo_update_tf(model, optimizer,\n",
        "                      np.array(obs_buf), np.array(action_buf), np.array(logp_buf),\n",
        "                      returns, advantages)\n",
        "\n",
        "        avg_reward = np.sum(reward_buf[-rollout_len:]) / rollout_len\n",
        "        print(f\"Timesteps {timestep}\\tAvgRolloutReward {avg_reward:.2f}\")\n",
        "\n",
        "        obs_buf, action_buf, reward_buf, done_buf, value_buf, logp_buf = [], [], [], [], [], []\n",
        "\n",
        "    env.close()\n",
        "    return model\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    train()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADIukhsERtPk",
        "outputId": "964d77de-395e-48cf-def9-2e59f772e12c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Timesteps 2048\tAvgRolloutReward 1.00\n"
          ]
        }
      ]
    }
  ]
}